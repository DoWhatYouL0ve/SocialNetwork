{"version":3,"sources":["components/Nav/nav.module.css","components/Messages/messanges.module.css","components/Profile/MyPosts/myposts.module.css","components/Messages/Dialog/dialog.module.css","components/Header/header.module.css","components/Profile/MyPosts/Post/post.module.css","components/Profile/ProfileInfo/profileInfo.module.css","components/Messages/Message/message.module.css","reportWebVitals.ts","Redax/state.tsx","components/Header/header.tsx","components/Nav/nav.tsx","components/Profile/MyPosts/Post/post.tsx","components/Profile/MyPosts/myposts.tsx","components/Profile/ProfileInfo/profileInfo.tsx","components/Profile/profile.tsx","components/Messages/Dialog/Dialog.tsx","components/Messages/Message/message.tsx","components/Messages/Messages.tsx","components/News/news.tsx","components/Music/music.tsx","components/Settings/settings.tsx","App.tsx","index.tsx"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rerenderEntireTree","console","log","state","profilePage","newPostText","postMessageData","id","like","postMessage","messagesPage","dialogsData","name","messagesData","message","addPost","newPost","push","updateNewPostText","newText","Header","className","b","header","src","alt","Nav","a","nav","item","to","activeClassName","activelink","Post","props","c","MyPosts","postData","map","p","postsblock","onChange","e","currentTarget","value","cols","rows","onClick","posts","ProfileInfo","description","Profile","Dialog","styles","dialog","active","Message","Messages","dialogElements","d","messageElements","m","dialogs","dialog_items","messages","News","Music","Settings","App","path","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.08bc47f6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"nav_nav__1uC-y\",\"item\":\"nav_item__2MLxD\",\"activelink\":\"nav_activelink__2a9QI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"messanges_dialogs__2IayW\",\"dialog_items\":\"messanges_dialog_items__1Lw-6\",\"active\":\"messanges_active__Sq6z7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsblock\":\"myposts_postsblock__SB2MQ\",\"posts\":\"myposts_posts__33j1E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"dialog_dialog__2Al8P\",\"dialog_items\":\"dialog_dialog_items__iS5Zj\",\"active\":\"dialog_active__1nJuT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__1h1vR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"post_item__wfl3y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"profileInfo_description__1lddT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"message_messages__23tTl\",\"message\":\"message_message__XEkUB\"};","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","let rerenderEntireTree = () => {\r\n    console.log('State is changed')\r\n}\r\n\r\nexport type MessageType = {\r\n    message: string\r\n    id: number\r\n}\r\n\r\nexport type DialogType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nexport type PostMessageType = {\r\n    id: number\r\n    like: number\r\n    postMessage: string\r\n}\r\n\r\n\r\nexport type ProfilePageType = {\r\n    postMessageData: Array<PostMessageType>\r\n    newPostText: string\r\n}\r\n\r\nexport type MessagesPageType = {\r\n    dialogsData: Array<DialogType>\r\n    messagesData: Array<MessageType>\r\n}\r\n\r\nexport type StateType = {\r\n    profilePage: ProfilePageType\r\n    messagesPage: MessagesPageType\r\n}\r\n\r\nexport let state: StateType = {\r\n    profilePage: {\r\n        newPostText: '',\r\n        postMessageData: [\r\n            {id: 1, like: 15, postMessage: 'Hi, how are you?'},\r\n            {id: 2, like: 15, postMessage: \"it'styles my firts post\"},\r\n            {id: 3, like: 15, postMessage: \"I'm OK\"}\r\n    ]},\r\n\r\n    messagesPage: {\r\n        dialogsData: [\r\n            {id: 1, name: 'Dimych'},\r\n            {id: 2, name: 'Bob'},\r\n            {id: 3, name: 'Jack'},\r\n            {id: 4, name: 'Tom'},\r\n            {id: 5, name: 'Helen'},\r\n            {id: 6, name: 'Daniel'}\r\n    ],\r\n        messagesData: [\r\n            {id: 1, message: 'Hi'},\r\n            {id: 2, message: 'How are you?'},\r\n            {id: 3, message: 'Did you go to the cinema yesterday?'},\r\n            {id: 4, message: 'have you ever ride a horse?'},\r\n            {id: 5, message: 'Nice to see you'},\r\n            {id: 6, message: 'God bless this moment'}\r\n    ]}\r\n}\r\n\r\n\r\nexport const addPost = () => {\r\n    let newPost: PostMessageType = {\r\n        id: 5,\r\n        postMessage: state.profilePage.newPostText,\r\n        like: 0\r\n    }\r\n    state.profilePage.postMessageData.push(newPost)\r\n    state.profilePage.newPostText = ''\r\n    rerenderEntireTree()\r\n}\r\n\r\nexport const updateNewPostText = (newText: string) => {\r\n    state.profilePage.newPostText = newText\r\n    rerenderEntireTree()\r\n}\r\n\r\nexport const subscribe = (observer: () => void) => {\r\n    rerenderEntireTree = observer // pattern observer похож на pattern publisher\r\n}","import React from \"react\";\r\nimport b from './header.module.css'\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <header className={b.header}>\r\n            <img src=\"https://media.keyshot.com/uploads/2018/10/keyshot-icon-256.png\" alt=\"logo\"/>\r\n        </header>\r\n    )\r\n}","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport a from './nav.module.css'\r\n\r\nexport const Nav = () => {\r\n    return (\r\n        <nav className={a.nav}>\r\n            <div className={a.item}>\r\n                <NavLink to=\"/profile\" activeClassName={a.activelink}>Profile</NavLink>\r\n            </div>\r\n            <div className={a.item}>\r\n                <NavLink to=\"/messages\" activeClassName={a.activelink}>Messages</NavLink>\r\n            </div>\r\n            <div className={a.item}>\r\n                <NavLink to=\"/news\" activeClassName={a.activelink}>News</NavLink>\r\n            </div>\r\n            <div className={a.item}>\r\n                <NavLink to=\"/music\" activeClassName={a.activelink}>Music</NavLink>\r\n            </div>\r\n            <div className={a.item}>\r\n                <NavLink to=\"settings\" activeClassName={a.activelink}>Settings</NavLink>\r\n            </div>\r\n        </nav>\r\n    )\r\n}","import c from \"./post.module.css\";\r\nimport React from \"react\";\r\n\r\ntype MessageType = {\r\n    postMessage: string\r\n    like?: number\r\n}\r\n\r\nexport const Post = (props: MessageType) => {\r\n    return (\r\n\r\n        <div className={c.item}>\r\n            <img src=\"https://static.intercomassets.com/avatars/147128/square_128/photo-1485404213.png?1485404213\"\r\n                 alt=\"Profile Foto\"/>\r\n            {props.postMessage}\r\n            <div>\r\n                <span>Like {props.like}</span>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n","import React, {ChangeEvent} from \"react\";\r\nimport c from './myposts.module.css'\r\nimport {Post} from './Post/post'\r\nimport {PostMessageType} from \"../../../Redax/state\";\r\n\r\n\r\ntype MyPostPropsType = {\r\n    postMessageData: Array<PostMessageType>\r\n    addPost: () => void\r\n    newPostText: string\r\n    updateNewPostText: (newText: string) => void\r\n}\r\n\r\nexport const MyPosts = (props: MyPostPropsType) => {\r\n\r\n    let postData = props.postMessageData.map( p => <Post postMessage={p.postMessage} like={p.like}/>)\r\n\r\n    let addPost = () => {\r\n            props.addPost()\r\n    }\r\n\r\n    const newPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.updateNewPostText(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div className={c.postsblock}>\r\n            <div>\r\n                <h3>My posts</h3>\r\n                <div>\r\n                    <div>\r\n                        <textarea onChange={newPostChange} name=\"NewPost\" id=\"1\" cols={30} rows={2}\r\n                                  value={props.newPostText}/>\r\n                    </div>\r\n                    <div>\r\n                        <button onClick={addPost}>Add Post</button>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n            <div className={c.posts}>\r\n                {postData}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport c from './profileInfo.module.css'\r\n\r\nexport const ProfileInfo = () => {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img src=\"https://i.pinimg.com/736x/7e/55/d6/7e55d6a9ba562e8f1f0b61af662d2970.jpg\" alt=\"image\"/>\r\n            </div>\r\n            <div className={c.description}>\r\n                <img src=\"https://displaypt.com/wp-content/uploads/2018/10/TEAM-200x200.png\" alt=\"foto\"/> + description\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport c from './profile.module.css'\r\nimport {MyPosts} from \"./MyPosts/myposts\";\r\nimport {ProfileInfo} from \"./ProfileInfo/profileInfo\";\r\nimport {ProfilePageType, updateNewPostText} from \"../../Redax/state\";\r\n\r\ntype ProfilePropsType = {\r\n    profilePage: ProfilePageType\r\n    addPost: () => void\r\n    updateNewPostText: (newText: string) => void\r\n}\r\n\r\nexport const Profile = (props: ProfilePropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo />\r\n            <MyPosts postMessageData={props.profilePage.postMessageData}\r\n                     addPost={props.addPost}\r\n                     newPostText={props.profilePage.newPostText}\r\n                     updateNewPostText={props.updateNewPostText}/>\r\n        </div>\r\n    )\r\n}","import styles from \"./dialog.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {DialogType} from \"../../../Redax/state\";\r\n\r\n\r\nexport const Dialog = (props: DialogType) => {\r\n    return (\r\n        <div className={styles.dialog + ' ' + styles.active}>\r\n            <NavLink to={'/messages/' + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}","import styles from \"./message.module.css\";\r\nimport React from \"react\";\r\n\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n}\r\n\r\nexport const Message = (props:MessagePropsType) => {\r\n    return (\r\n        <div className={styles.message}>{props.message}</div>\r\n    )\r\n}","import React from \"react\";\r\nimport styles from './messanges.module.css';\r\nimport {Dialog} from \"./Dialog/Dialog\";\r\nimport {Message} from \"./Message/message\";\r\nimport {MessagesPageType} from \"../../Redax/state\";\r\n\r\ntype MessagesPropsType = {\r\n    messagesPage: MessagesPageType\r\n}\r\n\r\nexport const Messages = (props: MessagesPropsType) => {\r\n\r\n    let dialogElements = props.messagesPage.dialogsData.map( (d) => <Dialog name={d.name} id={d.id}/> )\r\n\r\n    let messageElements = props.messagesPage.messagesData.map( m => <Message message={m.message} />)\r\n\r\n\r\n    return (\r\n        <div className={styles.dialogs}>\r\n            <div className={styles.dialog_items}>\r\n                {dialogElements}\r\n            </div>\r\n            <div className={styles.messages}>\r\n                {messageElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './news.module.css'\r\n\r\nexport const News = (props: any) => {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './music.module.css'\r\n\r\nexport const Music = (props: any) => {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './settings.module.css'\r\n\r\nexport const Settings = (props: any) => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {Header} from \"./components/Header/header\";\r\nimport {Nav} from \"./components/Nav/nav\";\r\nimport {Profile} from \"./components/Profile/profile\";\r\nimport {Messages} from './components/Messages/Messages'\r\nimport {BrowserRouter, Route} from 'react-router-dom';\r\nimport {News} from \"./components/News/news\";\r\nimport {Music} from \"./components/Music/music\";\r\nimport {Settings} from \"./components/Settings/settings\";\r\nimport {addPost, StateType} from \"./Redax/state\";\r\n\r\ntype AppPropsType = {\r\n    state: StateType\r\n    addPost: () => void\r\n    updateNewPostText: (newText: string) => void\r\n}\r\n\r\n//взять шаблон для соц сети и делать под него проект\r\n\r\nfunction App(props: AppPropsType) {\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <div className=\"app-wrapper\">\r\n                <Header/>\r\n                <Nav/>\r\n                <div className='app-wrapper-content'>\r\n                    <Route path={'/profile'}\r\n                           render={ () => <Profile profilePage={props.state.profilePage} addPost={props.addPost}\r\n                                                   updateNewPostText={props.updateNewPostText}/>}/>\r\n                    <Route path={'/messages'}\r\n                           render={() => <Messages messagesPage={props.state.messagesPage} />}/>\r\n                    <Route path={'/news'} render={() => <News />}/>\r\n                    <Route path={'/music'} render={ () => <Music />}/>\r\n                    <Route path={'/settings'} render={ () => <Settings /> }/>\r\n                </div>\r\n            </div>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import reportWebVitals from './reportWebVitals';\r\nimport {state, subscribe} from \"./Redax/state\";\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {addPost, updateNewPostText} from \"./Redax/state\";\r\n\r\n\r\nlet rerenderEntireTree = () => {\r\n    ReactDOM.render(\r\n        <React.StrictMode>\r\n            <App state={state} addPost={addPost} updateNewPostText={updateNewPostText}/>\r\n        </React.StrictMode>,\r\n        document.getElementById('root')\r\n    );\r\n}\r\n\r\nrerenderEntireTree()\r\nsubscribe(rerenderEntireTree)\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}